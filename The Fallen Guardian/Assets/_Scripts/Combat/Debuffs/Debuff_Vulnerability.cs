using System.Collections;
using System.Collections.Generic;
using TMPro;
using UnityEngine;

public class Debuff_Vulnerability : MonoBehaviour, IVulnerabilityable
{
    [SerializeField] Buff_Protection protection;

    [Header("DeBuff Bar")]
    [SerializeField] GameObject deBuffBar;
    [SerializeField] GameObject vulnerabilityParticlePrefab;
    GameObject vulnerabilityParticle;

    [Header("Icon")]
    [SerializeField] GameObject debuffPrefab;
    TextMeshProUGUI stacksText;
    GameObject buffIcon;

    [Header("Vulnerability")]
    public int activeVulnerabilityAmount = 0;
    int armorPerStack = 1;
    int vulnerabilityStacks = 0;
    int vulnerabilityAmount = 0;

    [Header("Character")]
    public bool isPlayer;
    [SerializeField] PlayerStats playerStats;
    [SerializeField] Enemy enemy;

    public void Vulnerability(int stacks, float duration)
    {
        // Increase Stack Amount Based on the New Buff
        vulnerabilityStacks += stacks;

        // Cap the Stacks at 25
        vulnerabilityStacks = Mathf.Min(vulnerabilityStacks, 25);

        // Gain Based on Stack Amount
        ApplyVulnerability(vulnerabilityStacks);

        // Icon
        if (!buffIcon)
        {
            buffIcon = Instantiate(debuffPrefab, deBuffBar.transform);
            buffIcon.transform.localScale = new Vector3(1, 1, 1);

            // Get Stacks Text
            stacksText = buffIcon.GetComponentInChildren<TextMeshProUGUI>();
        }

        if (!vulnerabilityParticle)
        {
            vulnerabilityParticle = Instantiate(vulnerabilityParticlePrefab, transform);
        }

        // Stacks Text
        stacksText.text = vulnerabilityStacks.ToString();

        // Start a Timer for Each Instance of the Buff
        StartCoroutine(Stack(stacks, duration));
    }

    IEnumerator Stack(int stacks, float duration)
    {
        yield return new WaitForSeconds(duration);

        // Subtrack the Stack from our Stacks
        vulnerabilityStacks -= stacks;

        // Ensure Stacks doesn't go below zero
        vulnerabilityStacks = Mathf.Max(vulnerabilityStacks, 0);

        if (vulnerabilityStacks == 0)
        {
            ResetVulnerability();
            Destroy(buffIcon);
            Destroy(vulnerabilityParticle);
        }
        else
        {
            ApplyVulnerability(vulnerabilityStacks);

            // Stacks Text
            stacksText.text = vulnerabilityStacks.ToString();
        }
    }

    void ApplyVulnerability(int stacks)
    {
        // Calculate the new weakness amount based on the number of stacks
        vulnerabilityAmount = armorPerStack * stacks;

        // Update the active weakness amount in the PlayerStats or Enemy
        if (isPlayer)
        {
            activeVulnerabilityAmount = vulnerabilityAmount;
        }
        else
        {
            activeVulnerabilityAmount = vulnerabilityAmount;
        }

        // Recalculate damage
        Calculate();
    }

    void Calculate()
    {
        if (isPlayer)
        {
            playerStats.CurrentArmor = playerStats.BaseArmor + protection.activeProtectionAmount - activeVulnerabilityAmount;

        }
        else
        {
            enemy.CurrentArmor = enemy.BaseArmor + protection.activeProtectionAmount - activeVulnerabilityAmount;
        }
    }

    void ResetVulnerability()
    {
        // Reset active weakness amount to zero in PlayerStats or Enemy
        if (isPlayer)
        {
            activeVulnerabilityAmount = 0;
        }
        else
        {
            activeVulnerabilityAmount = 0;
        }

        // Recalculate damage
        Calculate();
    }
}
